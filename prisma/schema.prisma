// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  name                String?
  characterName       String?
  subname             String?
  bio                 String?              @db.Text
  birthday            DateTime?
  gender              String?
  iconUrl             String?
  bannerUrl           String?
  handle              String?              @unique
  handleChangeCount   Int                  @default(0)     @map("handle_change_count")
  handleChangeTokens  Int                  @default(1)     @map("handle_change_tokens")
  isPremiumUser       Boolean              @default(false) @map("is_premium_user")
  role                String               @default("user")
  subscriptionStatus  String?              @map("subscription_status")
  emailVerified       DateTime?
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // リレーション
  accounts            Account[]
  sessions            Session[]
  ogp                 UserOGP?
  links               UserLink[]
  imageBanners        UserImageBanner[]
  imageCarousels      UserImageCarousel[]
  imageSidebars       UserImageSidebar[]
  customQuestions     UserCustomQuestion[]
  youtubeSettings     UserYoutubeSettings?
  recommendYoutubes   UserRecommendYoutube[]
  popupSettings       UserPopupSettings?
  displaySettings     UserDisplaySettings?
  notificationSettings NotificationSettings?
  author              Author?
  comments            Comment[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model NotificationSettings {
  id                String   @id @default(uuid())
  pushNotifications Boolean  @default(false)
  
  // リレーション
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model UserLink {
  id                String       @id @default(uuid())
  url               String
  title             String?
  description       String?
  sortOrder         Int          @default(0)
  isActive          Boolean      @default(true)
  useOriginalIcon   Boolean      @default(false)
  originalIconUrl   String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // リレーション
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId         String
  service           LinkService  @relation(fields: [serviceId], references: [id])
  iconId            String?
  icon              ServiceIcon? @relation(fields: [iconId], references: [id])
  
  @@index([userId])
  @@index([serviceId])
  @@index([iconId])
}

model UserYoutubeSettings {
  id            String              @id @default(uuid())
  channelId     String?
  displayCount  Int                 @default(8)
  lastFetchedAt DateTime?
  pickupVideo   String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  // リレーション
  userId        String              @unique
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos        UserYoutubeVideo[]
  
  @@index([userId])
}

model UserImageBanner {
  id        String  @id @default(uuid())
  url       String?
  imgUrl    String
  alt       String?
  sortOrder Int     @default(0)
  
  // リレーション
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model UserYoutubeVideo {
  id            String             @id @default(uuid())
  url           String
  thumbnailUrl  String?
  title         String?
  description   String?
  publishedAt   DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  
  // リレーション
  settingsId    String
  settings      UserYoutubeSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  
  @@index([settingsId])
}

model UserRecommendYoutube {
  id            String   @id @default(uuid())
  url           String
  thumbnailUrl  String?
  title         String?
  description   String?
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // リレーション
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model UserPopupSettings {
  id                String    @id @default(uuid())
  bellTitle         String?
  bellText          String?
  bellImageUrl      String?
  bellUrl           String?
  bellLastUpdated   DateTime?
  emailTitle        String?
  emailText         String?
  popup1ImageUrl    String?
  popup1Url         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // リレーション
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model UserOGP {
  id          String  @id @default(uuid())
  imgUrl      String?
  title       String?
  description String?
  
  // リレーション
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model UserCustomQuestion {
  id        String  @id @default(uuid())
  question  String
  answer    String
  sortOrder Int     @default(0)
  
  // リレーション
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model UserImageCarousel {
  id        String  @id @default(uuid())
  url       String?
  imgUrl    String
  alt       String?
  sortOrder Int     @default(0)
  
  // リレーション
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model UserImageSidebar {
  id        String  @id @default(uuid())
  url       String?
  imgUrl    String
  alt       String?
  sortOrder Int     @default(0)
  
  // リレーション
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model UserDisplaySettings {
  id                String  @id @default(uuid())
  displayYoutube    Boolean @default(true)
  displayDevice     Boolean @default(true)
  displayFaq        Boolean @default(true)
  displayPopup1     Boolean @default(true)
  displayPopupBell  Boolean @default(true)
  displayPopupEmail Boolean @default(true)
  displayUserList   Boolean @default(true)
  displayOwnPage    Boolean @default(true)
  
  // リレーション
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model LinkService {
  id                 String        @id @default(uuid())
  name               String
  slug               String        @unique
  description        String?
  baseUrl            String?
  allowOriginalIcon  Boolean       @default(true)
  isActive           Boolean       @default(true)
  sortOrder          Int           @default(0)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  
  // リレーション
  icons              ServiceIcon[]
  links              UserLink[]
}

model ServiceIcon {
  id            String      @id @default(uuid())
  name          String
  fileName      String
  filePath      String
  style         IconStyle
  colorScheme   IconColor
  description   String?
  isActive      Boolean     @default(true)
  sortOrder     Int         @default(0)
  uploadedBy    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // リレーション
  serviceId     String
  service       LinkService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  links         UserLink[]
  
  @@index([serviceId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id           String    @id @default(uuid())
  bio          String?
  profileImage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // リレーション
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  articles     Article[]
  
  @@index([userId])
}

model Category {
  id           String    @id @default(uuid())
  name         String
  slug         String    @unique
  description  String?
  parentId     String?
  parent       Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryToCategory")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // リレーション
  articles     ArticleCategory[]
  
  @@index([parentId])
}

model Tag {
  id           String    @id @default(uuid())
  name         String
  slug         String    @unique
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // リレーション
  articles     ArticleTag[]
}

model Article {
  id           String    @id @default(uuid())
  title        String
  slug         String    @unique
  content      String    @db.Text
  excerpt      String?
  featuredImage String?
  status       ArticleStatus @default(DRAFT)
  viewCount    Int       @default(0)
  publishedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // リレーション
  authorId     String
  author       Author    @relation(fields: [authorId], references: [id])
  categories   ArticleCategory[]
  tags         ArticleTag[]
  comments     Comment[]
  
  @@index([authorId])
  @@index([slug])
  @@index([publishedAt])
}

model ArticleCategory {
  articleId    String
  categoryId   String
  
  // リレーション
  article      Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([articleId, categoryId])
  @@index([articleId])
  @@index([categoryId])
}

model ArticleTag {
  articleId    String
  tagId        String
  
  // リレーション
  article      Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag          Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([articleId, tagId])
  @@index([articleId])
  @@index([tagId])
}

model Comment {
  id           String    @id @default(uuid())
  content      String
  parentId     String?
  parent       Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children     Comment[] @relation("CommentToComment")
  isApproved   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // リレーション
  articleId    String
  article      Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([articleId])
  @@index([userId])
  @@index([parentId])
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum IconStyle {
  FILLED
  OUTLINE
  MINIMAL
  GRADIENT
  THREE_D
}

enum IconColor {
  ORIGINAL
  MONOCHROME
  WHITE
  BLACK
  CUSTOM
}