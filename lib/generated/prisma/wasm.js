
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  characterName: 'characterName',
  subname: 'subname',
  bio: 'bio',
  birthday: 'birthday',
  gender: 'gender',
  iconUrl: 'iconUrl',
  bannerUrl: 'bannerUrl',
  handle: 'handle',
  handleChangeCount: 'handleChangeCount',
  handleChangeTokens: 'handleChangeTokens',
  isPremiumUser: 'isPremiumUser',
  role: 'role',
  subscriptionStatus: 'subscriptionStatus',
  emailVerified: 'emailVerified',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.NotificationSettingsScalarFieldEnum = {
  id: 'id',
  pushNotifications: 'pushNotifications',
  userId: 'userId'
};

exports.Prisma.UserLinkScalarFieldEnum = {
  id: 'id',
  url: 'url',
  title: 'title',
  description: 'description',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  useOriginalIcon: 'useOriginalIcon',
  originalIconUrl: 'originalIconUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  serviceId: 'serviceId',
  iconId: 'iconId'
};

exports.Prisma.UserYoutubeSettingsScalarFieldEnum = {
  id: 'id',
  channelId: 'channelId',
  displayCount: 'displayCount',
  lastFetchedAt: 'lastFetchedAt',
  pickupVideo: 'pickupVideo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.UserImageBannerScalarFieldEnum = {
  id: 'id',
  url: 'url',
  imgUrl: 'imgUrl',
  alt: 'alt',
  sortOrder: 'sortOrder',
  userId: 'userId'
};

exports.Prisma.UserYoutubeVideoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  thumbnailUrl: 'thumbnailUrl',
  title: 'title',
  description: 'description',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  settingsId: 'settingsId'
};

exports.Prisma.UserRecommendYoutubeScalarFieldEnum = {
  id: 'id',
  url: 'url',
  thumbnailUrl: 'thumbnailUrl',
  title: 'title',
  description: 'description',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.UserPopupSettingsScalarFieldEnum = {
  id: 'id',
  bellTitle: 'bellTitle',
  bellText: 'bellText',
  bellImageUrl: 'bellImageUrl',
  bellUrl: 'bellUrl',
  bellLastUpdated: 'bellLastUpdated',
  emailTitle: 'emailTitle',
  emailText: 'emailText',
  popup1ImageUrl: 'popup1ImageUrl',
  popup1Url: 'popup1Url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.UserOGPScalarFieldEnum = {
  id: 'id',
  imgUrl: 'imgUrl',
  title: 'title',
  description: 'description',
  userId: 'userId'
};

exports.Prisma.UserCustomQuestionScalarFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer',
  sortOrder: 'sortOrder',
  userId: 'userId'
};

exports.Prisma.UserInfoCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.UserInfoQuestionScalarFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId'
};

exports.Prisma.UserImageCarouselScalarFieldEnum = {
  id: 'id',
  url: 'url',
  imgUrl: 'imgUrl',
  alt: 'alt',
  sortOrder: 'sortOrder',
  userId: 'userId'
};

exports.Prisma.UserImageSidebarScalarFieldEnum = {
  id: 'id',
  url: 'url',
  imgUrl: 'imgUrl',
  alt: 'alt',
  sortOrder: 'sortOrder',
  userId: 'userId'
};

exports.Prisma.UserDisplaySettingsScalarFieldEnum = {
  id: 'id',
  displayYoutube: 'displayYoutube',
  displayDevice: 'displayDevice',
  displayFaq: 'displayFaq',
  displayPopup1: 'displayPopup1',
  displayPopupBell: 'displayPopupBell',
  displayPopupEmail: 'displayPopupEmail',
  displayUserList: 'displayUserList',
  displayOwnPage: 'displayOwnPage',
  userId: 'userId'
};

exports.Prisma.LinkServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  baseUrl: 'baseUrl',
  allowOriginalIcon: 'allowOriginalIcon',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceIconScalarFieldEnum = {
  id: 'id',
  name: 'name',
  fileName: 'fileName',
  filePath: 'filePath',
  style: 'style',
  colorScheme: 'colorScheme',
  description: 'description',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  uploadedBy: 'uploadedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  serviceId: 'serviceId'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.AuthorScalarFieldEnum = {
  id: 'id',
  bio: 'bio',
  profileImage: 'profileImage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ArticleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  content: 'content',
  excerpt: 'excerpt',
  featuredImage: 'featuredImage',
  status: 'status',
  viewCount: 'viewCount',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId'
};

exports.Prisma.ArticleCategoryScalarFieldEnum = {
  articleId: 'articleId',
  categoryId: 'categoryId'
};

exports.Prisma.ArticleTagScalarFieldEnum = {
  articleId: 'articleId',
  tagId: 'tagId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  parentId: 'parentId',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  articleId: 'articleId',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.IconStyle = exports.$Enums.IconStyle = {
  FILLED: 'FILLED',
  OUTLINE: 'OUTLINE',
  MINIMAL: 'MINIMAL',
  GRADIENT: 'GRADIENT',
  THREE_D: 'THREE_D'
};

exports.IconColor = exports.$Enums.IconColor = {
  ORIGINAL: 'ORIGINAL',
  MONOCHROME: 'MONOCHROME',
  WHITE: 'WHITE',
  BLACK: 'BLACK',
  CUSTOM: 'CUSTOM'
};

exports.ArticleStatus = exports.$Enums.ArticleStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  NotificationSettings: 'NotificationSettings',
  UserLink: 'UserLink',
  UserYoutubeSettings: 'UserYoutubeSettings',
  UserImageBanner: 'UserImageBanner',
  UserYoutubeVideo: 'UserYoutubeVideo',
  UserRecommendYoutube: 'UserRecommendYoutube',
  UserPopupSettings: 'UserPopupSettings',
  UserOGP: 'UserOGP',
  UserCustomQuestion: 'UserCustomQuestion',
  UserInfoCategory: 'UserInfoCategory',
  UserInfoQuestion: 'UserInfoQuestion',
  UserImageCarousel: 'UserImageCarousel',
  UserImageSidebar: 'UserImageSidebar',
  UserDisplaySettings: 'UserDisplaySettings',
  LinkService: 'LinkService',
  ServiceIcon: 'ServiceIcon',
  VerificationToken: 'VerificationToken',
  Author: 'Author',
  Category: 'Category',
  Tag: 'Tag',
  Article: 'Article',
  ArticleCategory: 'ArticleCategory',
  ArticleTag: 'ArticleTag',
  Comment: 'Comment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
